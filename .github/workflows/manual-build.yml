name: Manual Build

on:
  workflow_dispatch:
    inputs:
      target_platform:
        description: 'Target platform'
        required: true
        type: choice
        options:
          - linux-x86_64
          - macos-x86_64
          - macos-arm64
          - windows-x86_64

jobs:
  build:
    runs-on: ${{ contains(matrix.name, 'linux') && 'self-hosted' || matrix.os }}
    container: ${{ contains(matrix.name, 'linux') && 'ubuntu:20.04' || '' }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ${{ github.event.inputs.target_platform }}
            os: ${{ (github.event.inputs.target_platform == 'linux-x86_64' && 'ubuntu-20.04') || 
                    (github.event.inputs.target_platform == 'macos-x86_64' && 'macos-12') ||
                    (github.event.inputs.target_platform == 'macos-arm64' && 'macos-14') ||
                    (github.event.inputs.target_platform == 'windows-x86_64' && 'windows-2019') }}
            arch: ${{ endsWith(github.event.inputs.target_platform, 'arm64') && 'arm64' || 'x86_64' }}

    steps:
      - uses: actions/checkout@v4

      - name: Build for Linux
        if: contains(matrix.name, 'linux')
        shell: bash
        run: |
          echo "Building for Linux ${{ matrix.arch }}"
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get -y install \
            libxcb1-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libgtk-3-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libxcb-*-dev \
            libclang-12-dev \
            llvm-12
          apt list --installed
          apt remove llvm-10 clang-10
          #make ARCH=${{ matrix.arch }}
          #echo UPLOAD_FILE=cutter-deps-qt-linux-${{ matrix.arch }}.tar.gz >> $GITHUB_ENV
          #echo UPLOAD_ASSET_TYPE=application/gzip >> $GITHUB_ENV

      - name: Build for macOS
        if: contains(matrix.name, 'macos')
        run: |
          echo "Building for macOS ${{ matrix.arch }}"
          #echo "Building for macOS ARM64"
          #xcode-select --print-path
          #make ARCH=${{ matrix.arch }} BUILD_THREADS=1
          #echo UPLOAD_FILE=cutter-deps-qt-macos-${{ matrix.arch }}.tar.gz >> $GITHUB_ENV
          #echo UPLOAD_ASSET_TYPE=application/gzip >> $GITHUB_ENV

      - name: Build for Windows
        if: contains(matrix.name, 'windows')
        shell: powershell
        run: |
          echo "Building for Windows ${{ matrix.arch }}"
          #./build_windows.ps1
          #echo "UPLOAD_FILE=cutter-deps-qt-win-${{ matrix.arch }}.tar.gz" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          #echo "UPLOAD_ASSET_TYPE=application/gzip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
